(()=>{"use strict";var e,o={310:(e,o,t)=>{var r=t(338);const c=window.React,i=e=>{const o=(e=>e.replace(/^([A-Z])|[\s-_]+(\w)/g,(e,o,t)=>t?t.toUpperCase():o.toLowerCase()))(e);return o.charAt(0).toUpperCase()+o.slice(1)},s=(...e)=>e.filter((e,o,t)=>Boolean(e)&&""!==e.trim()&&t.indexOf(e)===o).join(" ").trim(),n=e=>{for(const o in e)if(o.startsWith("aria-")||"role"===o||"title"===o)return!0};var d={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const a=(0,c.forwardRef)(({color:e="currentColor",size:o=24,strokeWidth:t=2,absoluteStrokeWidth:r,className:i="",children:a,iconNode:m,...p},l)=>(0,c.createElement)("svg",{ref:l,...d,width:o,height:o,stroke:e,strokeWidth:r?24*Number(t)/Number(o):t,className:s("lucide",i),...!a&&!n(p)&&{"aria-hidden":"true"},...p},[...m.map(([e,o])=>(0,c.createElement)(e,o)),...Array.isArray(a)?a:[a]])),m=((e,o)=>{const t=(0,c.forwardRef)(({className:t,...r},n)=>{return(0,c.createElement)(a,{ref:n,iconNode:o,className:s(`lucide-${d=i(e),d.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,`lucide-${e}`,t),...r});var d});return t.displayName=i(e),t})("play",[["path",{d:"M5 5a2 2 0 0 1 3.008-1.728l11.997 6.998a2 2 0 0 1 .003 3.458l-12 7A2 2 0 0 1 5 19z",key:"10ikf1"}]]),p=JSON.parse('[{"command":"git init","description":"新しいGitリポジトリを初期化します。現在のディレクトリに.gitフォルダを作成し、バージョン管理を開始します。"},{"command":"git clone","description":"リモートリポジトリをローカルにコピーします。GitHubやGitLabなどのリモートリポジトリから完全なコピーを作成します。"},{"command":"git add .","description":"現在のディレクトリの全ての変更をステージングエリアに追加します。コミット対象に含める変更を準備します。"},{"command":"git commit -m","description":"ステージングエリアの変更をコミットします。-mオプションでコミットメッセージを指定して変更履歴を記録します。"},{"command":"git push","description":"ローカルのコミットをリモートリポジトリにアップロードします。変更をチームメンバーと共有するために使用します。"},{"command":"git pull","description":"リモートリポジトリの最新の変更をローカルにダウンロードしてマージします。他の開発者の変更を取得します。"},{"command":"git status","description":"現在の作業ディレクトリとステージングエリアの状態を表示します。変更されたファイルや未追跡のファイルを確認できます。"},{"command":"git branch","description":"ブランチの一覧を表示します。現在のブランチにはアスタリスク（*）が表示されます。新しいブランチの作成も可能です。"},{"command":"git checkout","description":"ブランチを切り替えたり、特定のコミットに移動します。-bオプションで新しいブランチを作成しながら切り替えることもできます。"},{"command":"git merge","description":"指定したブランチの変更を現在のブランチにマージします。機能ブランチをメインブランチに統合する際に使用します。"},{"command":"git log","description":"コミット履歴を表示します。各コミットのハッシュ、作成者、日時、メッセージを確認できます。"},{"command":"git diff","description":"ファイルの変更内容を表示します。ステージング前の変更や異なるコミット間の差分を確認できます。"},{"command":"git reset","description":"コミットやステージングの状態をリセットします。--hardオプションで作業ディレクトリの変更も破棄できます。"},{"command":"git stash","description":"現在の変更を一時的に保存します。別のブランチで作業する前に、未完成の変更を退避させる際に使用します。"},{"command":"git remote -v","description":"リモートリポジトリの一覧とそのURLを表示します。pushとfetchのURLが確認できます。"},{"command":"git fetch","description":"リモートリポジトリの情報を取得しますが、ローカルブランチにはマージしません。リモートの状態を確認する際に使用します。"},{"command":"git rebase","description":"コミット履歴を書き換えて、別のブランチの変更を統合します。線形的なコミット履歴を維持したい場合に使用します。"},{"command":"git tag","description":"特定のコミットにタグを付けます。リリースバージョンなどの重要なポイントをマークする際に使用します。"},{"command":"git cherry-pick","description":"他のブランチの特定のコミットを現在のブランチに適用します。必要な変更のみを選択的に取り込む際に使用します。"},{"command":"git config --global","description":"Gitの全体設定を行います。ユーザー名やメールアドレスなど、全リポジトリで共通の設定を指定します。"}]'),l=JSON.parse('[{"command":"docker ps","description":"現在実行中のDockerコンテナの一覧を表示します。コンテナID、イメージ名、実行時間、ステータス、ポートマッピングなどの情報が確認できます。"},{"command":"docker run","description":"Dockerイメージから新しいコンテナを作成して実行します。ポートマッピング、環境変数、ボリュームマウントなどのオプションを指定できます。"},{"command":"docker build","description":"DockerfileからDockerイメージをビルドします。-tオプションでタグ名を指定し、コンテキストパスを指定してイメージを作成します。"},{"command":"docker push","description":"ローカルのDockerイメージをDocker Hubやプライベートレジストリなどのリモートリポジトリにアップロードします。"},{"command":"docker pull","description":"Docker HubやプライベートレジストリからDockerイメージをローカル環境にダウンロードします。指定されたタグのイメージを取得します。"},{"command":"docker stop","description":"実行中のDockerコンテナを停止します。コンテナIDまたはコンテナ名を指定して、グレースフルシャットダウンを実行します。"},{"command":"docker exec","description":"実行中のDockerコンテナ内で新しいコマンドを実行します。-itオプションと組み合わせて対話的にコンテナ内に入ることができます。"},{"command":"docker-compose build","description":"docker-compose.ymlファイルに定義されたサービスのDockerイメージをビルドします。複数のサービスを一括でビルドできます。"},{"command":"docker-compose up","description":"docker-compose.ymlファイルに定義された全てのサービスを起動します。-dオプションでバックグラウンド実行、--buildオプションで強制リビルドが可能です。"},{"command":"docker-compose down","description":"docker-compose upで起動したサービスを停止し、コンテナ、ネットワークを削除します。-vオプションでボリュームも削除できます。"},{"command":"docker-compose restart","description":"docker-compose.ymlで定義されたサービスを再起動します。設定変更後の反映や、サービスの問題解決に使用します。"},{"command":"docker-compose start","description":"停止中のdocker-composeサービスを開始します。docker-compose upとは異なり、既存のコンテナを再開始します。"},{"command":"docker-compose stop","description":"実行中のdocker-composeサービスを停止します。コンテナは削除されず、docker-compose startで再開できます。"},{"command":"docker-compose ps","description":"docker-compose.ymlで定義されたサービスの現在の状態を表示します。各サービスのステータス、ポート情報などが確認できます。"},{"command":"docker-compose logs","description":"docker-composeで管理されているサービスのログを表示します。特定のサービス名を指定して個別のログも確認できます。"},{"command":"docker-compose logs -f","description":"docker-composeサービスのログをリアルタイムで監視します。新しいログエントリが自動的に表示され続けます。"},{"command":"docker-compose logs -f --tail 10","description":"docker-composeサービスのログの最新10行を表示し、その後リアルタイムでログを監視します。デバッグ時に最新の状況を素早く確認できます。"},{"command":"docker-compose logs -f --tail 100","description":"docker-composeサービスのログの最新100行を表示し、その後リアルタイムでログを監視します。より多くの履歴を確認したい場合に使用します。"},{"command":"docker-compose exec","description":"実行中のdocker-composeサービス内でコマンドを実行します。サービス名を指定して、そのコンテナ内でシェルやその他のコマンドを実行できます。"},{"command":"docker-compose exec -it","description":"docker-composeサービス内で対話的にコマンドを実行します。-itオプションによりターミナルの対話機能が有効になり、シェルセッションが開始できます。"}]'),g=window.ReactJSXRuntime,u=()=>{const e={git:{name:"Git",data:p},docker:{name:"Docker",data:l}},[o,t]=(0,c.useState)("git"),[r,i]=(0,c.useState)(!1),[s,n]=(0,c.useState)([]),[d,a]=(0,c.useState)(0),[u,k]=(0,c.useState)(""),[h,f]=(0,c.useState)("normal"),b=e=>{const o=[...e];for(let e=o.length-1;e>0;e--){const t=Math.floor(Math.random()*(e+1));[o[e],o[t]]=[o[t],o[e]]}return o};(0,c.useEffect)(()=>{const t=e[o].data,r=b(t);n(r),i(!1),a(0),n([]),k("")},[o]);const x=s[d],v=x?.command||"",w=x?.description||"";return(0,g.jsx)(g.Fragment,{children:(0,g.jsxs)("div",{className:"typing-game",children:[(0,g.jsx)("p",{className:"mb-4",children:"カテゴリーを選択してください"}),(0,g.jsx)("div",{className:"flex gap-2 mb-4",children:Object.entries(e).map(([e,r])=>(0,g.jsx)("button",{onClick:()=>t(e),className:"text-sm font-bold py-3 px-6 rounded-lg transition-colors duration-200 "+(o===e?"bg-green-500 text-white border-2 border-green-600":"bg-gray-200 text-gray-700 hover:bg-gray-300 hover:border-gray-400"),children:r.name},e))}),r?(0,g.jsxs)(g.Fragment,{children:[(0,g.jsx)("div",{className:"text-md text-gray-500 tracking-widest mb-4 min-h-20 flex items-end",children:w}),x&&(0,g.jsxs)("div",{className:"relative",children:[(0,g.jsx)("input",{type:"text",className:"text-2xl p-4 border-2 rounded-lg w-full bg-transparent text-transparent\n                    focus:outline-none focus:ring-2 focus:ring-blue-300\n                    "+("miss"===h?"focus:ring-red-300 focus:ring-3":"correct"===h?"focus:ring-green-300 focus:ring-3":""),onKeyDown:e=>{if(" "===e.key&&e.preventDefault(),e.key===v[u.length]){const o=u+e.key;k(o),o.length===v.length&&(a(d+1),k(""),f("correct"),setTimeout(()=>{f("normal")},500))}else f("miss"),setTimeout(()=>{f("normal")},500)},autoFocus:!0,readOnly:!0}),(0,g.jsxs)("div",{className:"absolute inset-0 text-2xl p-4 tracking-widest pointer-events-none",children:[(0,g.jsx)("span",{className:"text-green-500 bg-green-50 pl-1",children:u}),(0,g.jsx)("span",{className:"text-gray-500",children:v.slice(u.length)})]})]})]}):(0,g.jsxs)("button",{onClick:()=>{if(0===s.length){const t=e[o].data,r=b(t);n(r)}i(!0)},className:"bg-blue-500 hover:bg-blue-600 text-white font-bold py-4 px-8 rounded-lg transition-colors duration-200 flex items-center gap-2 mb-4",children:[(0,g.jsx)(m,{className:"w-5 h-5"}),"Start Game"]})]})})},k=document.getElementById("react-root");k&&(0,r.H)(k).render((0,g.jsx)(u,{}))},338:(e,o,t)=>{var r=t(795);o.H=r.createRoot,r.hydrateRoot},795:e=>{e.exports=window.ReactDOM}},t={};function r(e){var c=t[e];if(void 0!==c)return c.exports;var i=t[e]={exports:{}};return o[e](i,i.exports,r),i.exports}r.m=o,e=[],r.O=(o,t,c,i)=>{if(!t){var s=1/0;for(m=0;m<e.length;m++){for(var[t,c,i]=e[m],n=!0,d=0;d<t.length;d++)(!1&i||s>=i)&&Object.keys(r.O).every(e=>r.O[e](t[d]))?t.splice(d--,1):(n=!1,i<s&&(s=i));if(n){e.splice(m--,1);var a=c();void 0!==a&&(o=a)}}return o}i=i||0;for(var m=e.length;m>0&&e[m-1][2]>i;m--)e[m]=e[m-1];e[m]=[t,c,i]},r.o=(e,o)=>Object.prototype.hasOwnProperty.call(e,o),(()=>{var e={57:0,350:0};r.O.j=o=>0===e[o];var o=(o,t)=>{var c,i,[s,n,d]=t,a=0;if(s.some(o=>0!==e[o])){for(c in n)r.o(n,c)&&(r.m[c]=n[c]);if(d)var m=d(r)}for(o&&o(t);a<s.length;a++)i=s[a],r.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return r.O(m)},t=globalThis.webpackChunkwp_script_test=globalThis.webpackChunkwp_script_test||[];t.forEach(o.bind(null,0)),t.push=o.bind(null,t.push.bind(t))})();var c=r.O(void 0,[350],()=>r(310));c=r.O(c)})();